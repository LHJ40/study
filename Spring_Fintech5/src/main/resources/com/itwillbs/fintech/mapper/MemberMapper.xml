<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.fintech.mapper.MemberMapper">
	
	<!-- 회원 가입 - INSERT -->
	<!-- 회원번호(idx)는 자동 증가이므로 null, 가입일은 now() 함수, 인증상태(mail_auth_status) 는 'N' 전달 -->
	<!-- 이메일(email)은 email1, email2 파라미터를 문자열 결합을 통해 저장 - MySQL 의 concat() 함수 사용 -->
	<insert id="insertMember">
		INSERT
			INTO member
			VALUES (
				null -- 번호(자동 증가)
				, #{name}
				, #{id}
				, #{passwd}
<!-- 				, #{email} -->
				, CONCAT(#{email1}, '@', #{email2}) -- email 문자열 결합
				, #{job}
				, #{gender}
				, #{hobby}
				, #{motivation}
				, now()
				, 'N'
			)
	</insert>
	
	<!-- 로그인 - SELECT -->
	<!-- 아이디와 패스워드가 일치하는 레코드 조회 => resultType 을 MemberVO 타입으로 지정 -->
	<select id="selectCorrectUser" resultType="Member">
		SELECT * 
			FROM member
			WHERE
				id = #{id}
				AND passwd = #{passwd}
	</select>
	
	<!-- 로그인 - SELECT -->
	<!-- 아이디가 일치하는 레코드의 패스워드 조회 => resultType 을 String 타입으로 지정(string 가능) -->
	<select id="selectPasswd" resultType="string">
		SELECT passwd 
			FROM member
			WHERE
				id = #{id}
	</select>
	
	<!-- 회원 상세정보 조회 - SELECT -->
	<!-- 아이디가 일치하는 레코드 조회 -->
	<select id="selectMemberInfo" resultType="Member">
		SELECT *
			FROM member
			WHERE
				id = #{id}
	</select>
	
	<!-- 회원 목록 조회(관리자모드) - SELECT -->
	<select id="selectMemberList" resultType="Member">
		SELECT *
			FROM member
	</select>
	
	<!--  -->
	<!-- 이름(name), 이메일(email), 성별(gender), 취미(hobby), 가입동기(motivation) 수정 -->
	<!-- Mapper 에서 MemberVO 객체의 이름을 "member" 로 지정했으므로 #{member.xxx} 형식으로 접근 -->
	<!-- 
	회원 정보 수정(일반, 관리자모드) - UPDATE
	- 기본 변경 데이터 : 이름(name), 이메일(email1, email2 결합 -> email), 성별(gender), 취미(hobby), 가입동기(motivation)
	- 추가 변경 데이터 : 새 비밀번호(newPasswd)
	- 추가 변경 데이터인 새 비밀번호는 입력하지 않을 수도 있으므로
	  상황에 따라 SQL 구문이 달라져야한다!
	  따라서, MyBatis 의 동적SQL 문법(기능)을 활용하여 SQL 구문을 다르게 실행할 수 있도록 해야함
	  => 동적 SQL 기능 중 단일 if문을 사용하여 실행할 문장을 조건에 따라 실행 여부 결정 가능
	     <if test="조건식">조건식 결과가 true 일 때 실행할 SQL 문장</if>
	-->
	<update id="updateMember">
		UPDATE member
			SET
				name = #{member.name}
				<!-- 새 비밀번호(newPasswd) 가 존재할 경우 패스워드 변경 문장을 포함시키기 -->
				<if test="newPasswd neq ''">
				, passwd = #{newPasswd} -- 동적 SQL 기능으로 포함 여부를 결정해야하는 문장
				</if>
				, email = CONCAT(#{member.email1}, '@', #{member.email2})
				, job = #{member.job}
				, gender = #{member.gender}
				, hobby = #{member.hobby}
				, motivation = #{member.motivation}
			WHERE
				id = #{member.id}
	</update>
	
	<!-- 회원 정보 삭제(탈퇴) - DELETE -->
	<!-- 아이디가 일치하는 레코드 삭제 -->
	<delete id="deleteMember">
		DELETE 
			FROM member
			WHERE 
				id = #{id} 
	</delete>
	
	<!-- 메일 인증 여부 확인 - SELECT -->
	<!-- 아이디가 일치하는 레코드의 인증 상태(mail_auth_status) 조회 -->
	<select id="selectMailAuthStatus" resultType="string">
		SELECT mail_auth_status
			FROM member
			WHERE 
				id = #{id} 
	</select>
	
	<!-- 이메일과 일치하는 아이디 조회 - SELECT -->
	<!-- 이메일이 일치하는 레코드의 아이디(id) 조회 -->
	<select id="selectId" resultType="string">
		SELECT id
			FROM member
			WHERE 
				email = #{email}
	</select>
	
	<!-- 기존 인증정보 조회 - SELECT -->
	<select id="selectAuthInfo" resultType="AuthInfo">
		SELECT *
			FROM auth_info
			WHERE 
				id = #{id} 
	</select>
	
	<!-- 새 인증정보 추가 - INSERT -->
	<insert id="insertAuthInfo">
		INSERT
			INTO auth_info
			VALUES (
				#{id},
				#{authCode}
			) 
	</insert>
	
	<!-- 기존 인증정보 갱신 - UPDATE -->
	<update id="updateAuthInfo">
		UPDATE auth_info
			SET
				auth_code = #{authCode}
			WHERE 
				id = #{id} 
	</update>
	
	<!-- 인증상태 갱신 - UPDATE -->
	<!-- member 테이블의 mail_auth_status 컬럼값을 "Y" 로 변경 -->
	<update id="updateMailAuthStatus">
		UPDATE member
			SET
				mail_auth_status = 'Y'
			WHERE 
				id = #{id} 
	</update>
	
	<!-- 인증정보 삭제 - DELETE -->
	<!-- auth_info 테이블에서 아이디가 일치하는 레코드 삭제 -->
	<delete id="deleteAuthInfo">
		DELETE 
			FROM auth_info
			WHERE 
				id = #{id} 
	</delete>
	
	<!-- 은행계좌 인증여부 조회 - SELECT -->
	<!-- member 테이블에서 아이디가 일치하는 레코드의 bank_auth_status 컬럼 조회 -->
	<select id="selectBankAuthStatus" resultType="string">
		SELECT bank_auth_status
			FROM member
			WHERE
				id = #{id}
	</select>
	
</mapper>









