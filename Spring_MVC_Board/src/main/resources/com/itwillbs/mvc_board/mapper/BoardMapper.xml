<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.mvc_board.mapper.BoardMapper">
	
	<!-- 글 쓰기 - INSERT -->
	<!-- 
	단, 글번호(board_num) 컬럼이 일반 정수 컬럼이며 자동 증가 컬럼이 아니므로 직접 글번호 생성 필요
	이 때, 기존 게시물 번호 중 가장 큰 번호 조회 후 해당 번호 + 1 값을 
	새 글 번호(board_num), 참조글 번호(board_re_ref) 값으로 사용
	=> INSERT, UPDATE, DELETE 태그 내에서 SELECT 구문을 사용하여 특정 값을 조회해야할 경우
	   selectKey 태그를 INSERT 등의 태그 내에서 사용하여 작업 전,후에 값 조회 가능
	   => keyProperty 속성 : 조회 결과값을 저장할 속성(VO 객체의 변수명) => 조회 후 자동으로 해당 객체의 변수에 저장됨
	   => resultType 속성 : 조회 결과값에 대한 데이터타입
	   => order 속성 : 작업 시점 지정(작업 전 조회 수행 시 "BEFORE" , 작업 후 조회 수행 시 "AFTER" 로 지정)
	=> 주의! 레코드가 존재하지 않을 경우 MAX() 함수 사용 결과는 null 이므로 사용 시 오류 발생함
	   따라서, IFNULL 함수 추가(기본값 0 으로 설정)
	-->
	<insert id="insertBoard">
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(board_num), 0) FROM board
		</selectKey>
		INSERT
			INTO board
			VALUES (
				#{board_num} + 1    -- board_num
				, #{board_name}     -- board_name
				, #{board_subject}  -- board_subject
				, #{board_content}  -- board_content
				, #{board_file1}    -- board_file1
				, #{board_file2}    -- board_file2
				, #{board_file3}    -- board_file3
				, #{board_num} + 1  -- board_re_ref
				, 0                 -- board_re_lev
				, 0                 -- board_re_seq
				, 0                 -- board_readcount
				, now()             -- board_date
			)
	</insert>
	
	<!-- 글 목록 조회 - SELECT -->
	<!-- 이 때, 검색타입과 검색어에 대한 처리 추가 -->
	<select id="selectBoardList" resultType="com.itwillbs.mvc_board.vo.BoardVO">
		SELECT *
			FROM board -- FROM 절 이후 작업 분기 일어남(= 동적 SQL문 작성 필요)
			
			<!-- 
			조건1) 검색어(searchKeyword)가 널스트링이 아닐 때 WHERE 절 추가 => if 태그 필요
			조건2) 검색어가 있을 경우 검색타입(searchType)에 따라 컬럼명 다르게 검색
			       => 복수개의 조건에 따른 동적 SQL문을 작성하기 위해 choose, when, otherwise 태그 필요 
			
			< 주의 사항 >
			MySQL 의 경우 WHERE 에 LIKE 절 조합하여 검색 데이터를 포함하는 레코드 검색 시
			LIKE '%검색데이터%' 형식으로 지정해야한다.
			이 때, 마이바티스에서 표현 시 LIKE '%#{검색데이터}%' 형식으로 지정할 경우 오류 발생
			=> 마이바티스에서 #{데이터} 형식은 자동으로 해당 데이터타입을 감지하여 후처리 수행
			   ex) 문자열일 경우 자동으로 해당 데이터에 '' 기호를 붙여서 문자열 파라미터로 표기
			   따라서, '%#{검색데이터}%' 형식으로 지정 시 '%'검색데이터'%' 형태로 변경되어 오류 발생함
			=> 이런 경우 데이터타입을 감지하지 않도록 #{} 대신 ${} 로 파라미터 지정 가능
			   ${} 사용 시 전달받은 데이터 형태 그대로 SQL 문장에 전달함
			   단, 데이터타입 검증이 수행되지 않으므로 SQL 삽입 공격 등 보안 취약점이 발생할 수 있으므로
			   사용자 입력 데이터는 가급적 ${} 보다 #{} 사용하도록 권장됨!
			=> 결론> 테이블명, LIKE 절 등에 전달되는 데이터는 ${} 사용하고
			         외부로부터 입력받는 대부분의 데이터는 #{} 사용하자!
			-->
			<!-- 1. 검색어(searchKeyword)가 널스트링이 아닐 때 검색어 추가할 WHERE 절 수행, 아니면 생략 -->
			<if test="!searchKeyword.equals('')">
				WHERE
				<!-- 2. 검색타입(searchType)에 따른 WHERE 절 조건 대상 변경 -->
				<choose>
					<when test="searchType.equals('subject')">
						board_subject LIKE '%${searchKeyword}%'
					</when>
					<when test="searchType.equals('content')">
						board_content LIKE '%${searchKeyword}%'
					</when>
					<when test="searchType.equals('subject_content')">
						board_subject LIKE '%${searchKeyword}%'
						OR board_content LIKE '%${searchKeyword}%'
					</when>
					<when test="searchType.equals('name')">
						board_name LIKE '%${searchKeyword}%'
					</when>
				</choose>
			</if>
			
			ORDER BY 
				board_re_ref DESC
				, board_re_seq ASC
			LIMIT
				#{startRow}
				, #{listLimit}
	</select>
	
	<!-- 전체 글 목록 갯수 조회 - SELECT -->
	<!-- 
	LIKE 절 사용 시 CONCAT 함수를 통해 문자열 결합도 가능
	단, 문자열 결합 시 '%','검색데이터','%' 끼리 결합을 수행하므로 ${} 대신 #{} 사용해야함
	=> 각 데이터가 모두 문자열로 취급되어야 하므로 
	-->
	<select id="selectBoardListCount" resultType="int">
		SELECT COUNT(*)
			FROM board -- FROM 절 이후 작업 분기 일어남(= 동적 SQL문 작성 필요)
			<!-- 1. 검색어(searchKeyword)가 널스트링이 아닐 때 검색어 추가할 WHERE 절 수행, 아니면 생략 -->
			<if test="!searchKeyword.equals('')">
				WHERE
				<!-- 2. 검색타입(searchType)에 따른 WHERE 절 조건 대상 변경 -->
				<choose>
					<when test="searchType.equals('subject')">
						board_subject LIKE CONCAT('%', #{searchKeyword} ,'%')
					</when>
					<when test="searchType.equals('content')">
						board_content LIKE CONCAT('%', #{searchKeyword} ,'%')
					</when>
					<when test="searchType.equals('subject_content')">
						board_subject LIKE CONCAT('%', #{searchKeyword} ,'%') 
						OR board_content LIKE CONCAT('%', #{searchKeyword} ,'%') 
					</when>
					<when test="searchType.equals('name')">
						board_name LIKE CONCAT('%', #{searchKeyword} ,'%')
					</when>
				</choose>
			</if>
	</select>
	
	<!-- 글 상세정보 조회 - SELECT -->
	<select id="selectBoard" resultType="com.itwillbs.mvc_board.vo.BoardVO">
		SELECT *
			FROM board
			WHERE
				board_num = #{board_num}
	</select>
	
	<!-- 게시물 조회수 증가 - UPDATE -->
<!-- 	<update id="updateReadcount"> -->
<!-- 		UPDATE board -->
<!-- 			SET  -->
<!-- 				board_readcount = board_readcount + 1 -->
<!-- 			WHERE -->
<!-- 				board_num = #{board_num} -->
<!-- 	</update> -->

	<!-- 게시물 조회수 증가 - UPDATE -->
	<!-- selectKey 를 활용하여 조회수 증가 후의 board_readcount 값을 조회하여 BoardVO 객체에 저장 -->
	<!-- 조회된 결과값을 저장할 변수가 파라미터로 전달받은 객체의 멤버변수명과 동일할 경우 해당 객체에 저장 -->
	<!-- 이 때, 객체를 별도로 리턴 선언하지 않고도, 객체는 공유되므로 외부에서 변경된 값을 사용 가능 -->
	<update id="updateReadcount">
		<!-- selectKey 태그는 위치와 상관없이 order 속성값에 따라 실행됨 -->
		<selectKey keyProperty="board_readcount" resultType="int" order="AFTER">
			SELECT board_readcount
				FROM board
				WHERE
					board_num = #{board_num}
		</selectKey>
		UPDATE board
			SET 
				board_readcount = board_readcount + 1
			WHERE
				board_num = #{board_num}
	</update>
	
	<!-- 글 삭제 - DELETE -->
	<!-- 글번호가 일치하는 레코드 삭제 -->
	<delete id="deleteBoard">
		DELETE
			FROM board
			WHERE
				board_num = #{board_num}
	</delete>
	
	<!-- 답글 등록 전 순서번호 증가 - UPDATE -->
	<!-- 
	참조글번호(board_re_ref)가 원본글의 참조글번호와 같고,
	순서번호(board_re_seq)가 원본글의 순서번호 보다 큰 레코드를 찾아
	해당 레코드의 순서번호를 + 1 증가 처리 
	-->
	<update id="updateBoardReSeq">
		UPDATE board
			SET
				board_re_seq = board_re_seq + 1
			WHERE
				board_re_ref = #{board_re_ref}
				AND board_re_seq > #{board_re_seq}
	</update>
	
	<!-- 답글 등록 - INSERT -->
	<!-- 글쓰기와 거의 동일하며, 참조글번호(그대로), 들여쓰기레벨(+1), 순서번호(+1) 사용  -->
	<insert id="insertReplyBoard">
		<selectKey keyProperty="board_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(board_num), 0) FROM board
		</selectKey>
		INSERT
			INTO board
			VALUES (
				#{board_num} + 1    -- board_num
				, #{board_name}     -- board_name
				, #{board_subject}  -- board_subject
				, #{board_content}  -- board_content
				, #{board_file1}    -- board_file1
				, #{board_file2}    -- board_file2
				, #{board_file3}    -- board_file3
				, #{board_re_ref}   -- board_re_ref(전달받은 번호 사용)
				, #{board_re_lev} + 1  -- board_re_lev(전달받은 값 + 1)
				, #{board_re_seq} + 1  -- board_re_seq(전달받은 값 + 1)
				, 0                 -- board_readcount
				, now()             -- board_date
			)
	</insert>	
	
	<!-- 글 수정 - UPDATE -->
	<!-- 제목, 내용은 그대로 수정 -->
	<!-- 파일은 각각의 파일명이 전달되었을 경우(파일명이 널스트링이 아닐 경우)에만 수정 -->
	<update id="updateBoard">
		UPDATE board
			SET
				board_subject = #{board_subject}
				, board_content = #{board_content}
				<if test="!board_file1.equals('')">
					, board_file1 = #{board_file1}
				</if>
				<if test="!board_file2.equals('')">
					, board_file1 = #{board_file1}
				</if>
				<if test="!board_file3.equals('')">
					, board_file1 = #{board_file1}
				</if>
			WHERE
				board_num = #{board_num}
	</update>
</mapper>
















